/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var virshLang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,25],$V2=[1,29],$V3=[1,26],$V4=[1,43],$V5=[1,27],$V6=[1,28],$V7=[1,54],$V8=[1,49],$V9=[1,46],$Va=[1,47],$Vb=[1,48],$Vc=[1,50],$Vd=[1,51],$Ve=[1,52],$Vf=[1,53],$Vg=[1,56],$Vh=[1,58],$Vi=[5,9,10,44,84],$Vj=[5,9,10,20,26,44,84],$Vk=[2,31],$Vl=[1,61],$Vm=[1,62],$Vn=[5,9,10,20,44,84],$Vo=[5,9,10,16,17,20,26,43,44,47,77,81,82,83,84,85,87,88,89,90,91,92,93],$Vp=[1,69],$Vq=[2,88],$Vr=[5,9,10,16,17,20,26,33,43,44,47,77,81,82,83,84,85,87,88,89,90,91,92,93],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,55,58,62,63,64,67,69,74,75,77,81,82,83,84,85,87,88,89,90,91,92,93],$Vx=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$Vy=[2,92],$Vz=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$VA=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,55,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$VB=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,55,58,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,55,58,62,63,64,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$VG=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,52,55,58,62,63,64,67,69,77,81,82,83,84,85,87,88,89,90,91,92,93],$VH=[1,98],$VI=[1,99],$VJ=[43,47,77,81,82,83,85,87,88,89,90,91,92,93],$VK=[9,44],$VL=[1,125],$VM=[1,127],$VN=[47,81,82],$VO=[9,84],$VP=[2,6],$VQ=[5,10,44,84],$VR=[5,9,10,16,17,20,26,33,37,38,39,40,43,44,47,77,81,82,83,84,85,87,88,89,90,91,92,93];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"done":3,"block":4,"EOF":5,"blockNext":6,"list":7,"listNext":8,"COMMA":9,"SEMICOLON":10,"bigCall":11,"bigCallNext":12,"call":13,"bigCallAliases":14,"callNext":15,"DOLLAR":16,"ELSE":17,"assign":18,"assignNext":19,"ASSIGN":20,"ref":21,"refNext":22,"REF":23,"unapply":24,"unapplyNext":25,"UNAPPLY":26,"invert":27,"invertNext":28,"BANG":29,"take":30,"takeNext":31,"reference":32,"TAKE":33,"compare":34,"compareNext":35,"cmp":36,"EEQ":37,"NEQ":38,"LT":39,"GT":40,"obj":41,"objNext":42,"OBRACE":43,"CBRACE":44,"objList":45,"keyval":46,"WORD":47,"COLON":48,"keyvalNext":49,"mod":50,"modNext":51,"MOD":52,"add":53,"addNext":54,"PLUS":55,"subtract":56,"subtractNext":57,"SUBTRACT":58,"postfixUnitary":59,"postfixUnitaryNext":60,"uniTypes":61,"INCREMENT":62,"INVERT":63,"DECREMENT":64,"index":65,"indexNext":66,"OBRACK":67,"indexInside":68,"CBRACK":69,"lookup":70,"lookupNext":71,"lookOp":72,"lookupRHS":73,"DOT":74,"LOOK":75,"simple":76,"simpleNext":77,"literal":78,"deferred":79,"refWord":80,"IF":81,"FOR":82,"OPAREN":83,"CPAREN":84,"INTEGER":85,"RANGE":86,"PATH":87,"DSTRING":88,"SSTRING":89,"FLOAT":90,"TRUE":91,"FALSE":92,"SYMBOL":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"COMMA",10:"SEMICOLON",16:"DOLLAR",17:"ELSE",20:"ASSIGN",23:"REF",26:"UNAPPLY",29:"BANG",33:"TAKE",37:"EEQ",38:"NEQ",39:"LT",40:"GT",43:"OBRACE",44:"CBRACE",47:"WORD",48:"COLON",52:"MOD",55:"PLUS",58:"SUBTRACT",62:"INCREMENT",63:"INVERT",64:"DECREMENT",67:"OBRACK",69:"CBRACK",74:"DOT",75:"LOOK",77:"simpleNext",81:"IF",82:"FOR",83:"OPAREN",84:"CPAREN",85:"INTEGER",86:"RANGE",87:"PATH",88:"DSTRING",89:"SSTRING",90:"FLOAT",91:"TRUE",92:"FALSE",93:"SYMBOL"},
productions_: [0,[3,2],[3,2],[7,2],[7,3],[7,3],[8,1],[4,3],[4,3],[6,1],[6,1],[11,3],[11,3],[11,3],[14,1],[14,1],[12,1],[12,1],[18,3],[18,3],[19,1],[19,1],[21,2],[22,1],[22,1],[24,3],[24,3],[25,1],[25,1],[27,2],[27,2],[28,1],[28,1],[13,2],[13,2],[15,1],[15,1],[30,3],[30,3],[31,1],[31,1],[34,3],[34,3],[36,1],[36,1],[36,1],[36,1],[35,1],[35,1],[41,2],[41,3],[45,1],[45,3],[46,3],[49,1],[49,1],[42,1],[42,1],[50,3],[50,3],[51,1],[51,1],[53,3],[53,3],[54,1],[54,1],[56,3],[56,3],[57,1],[57,1],[59,2],[59,2],[61,1],[61,1],[61,1],[60,1],[60,1],[65,4],[68,1],[66,1],[66,1],[70,3],[70,3],[72,1],[72,1],[73,1],[71,1],[71,1],[76,1],[76,1],[76,1],[32,1],[80,1],[80,1],[80,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1]
    
break;
case 2:

        return {
            type: 'block',
            sequence: [$$[$0-1]]
        }
    
break;
case 3:

        this.$ = {
            type: 'list',
            sequence: [$$[$0-1]]
        }
    
break;
case 4:

        this.$ = {
            type: 'list',
            sequence: [$$[$0-2], $$[$0]]
        }
    
break;
case 5: case 8:

        $$[$0-2].sequence.push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 7:

        this.$ = {
            type: 'block',
            sequence: [$$[$0-2], $$[$0]]
        }
    
break;
case 11: case 12: case 13:

        $$[$0-2].args.push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 18: case 19:

        this.$ = {
            type: 'assign',
            lhs: $$[$0-2],
            rhs: $$[$0],
            op: $$[$0-1],
        }
    
break;
case 22:

        this.$ = {
            type: 'ref',
            value: $$[$0]
        }
    
break;
case 25: case 26:

        this.$ = {
            type: 'unapply',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 29: case 30:

        this.$ = {
            type: 'bang',
            rhs: $$[$0],
        }
    
break;
case 33:

        this.$ = {
            type: 'call',
            lhs: $$[$0-1],
            args: [$$[$0]],
        }
    
break;
case 34:

        $$[$0-1].args.push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 37: case 38:

        this.$ = {
            type: 'take',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 41: case 42:

        this.$ = {
            type: 'comp',
            lhs: $$[$0-2],
            rhs: $$[$0],
            op: $$[$0-1],
        }
    
break;
case 49:

        this.$ = {
            type: 'object',
            list: []
        }
    
break;
case 50:

        this.$ = {
            type: 'object',
            list: $$[$0-1]
        }
    
break;
case 51:

        this.$ = [$$[$0]]
    
break;
case 52:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 53:

        this.$ = {
            type: 'keyval',
            key: $$[$0-2],
            val: $$[$0]
        }
    
break;
case 58: case 59:

        this.$ = {
            type: 'mod',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 62: case 63:

        this.$ = {
            type: 'add',
            lhs: $$[$0-2],
            rhs: $$[$0]
        }
    
break;
case 66: case 67:

        this.$ = {
            type: 'subtract',
            lhs: $$[$0-2],
            rhs: $$[$0]
        }
    
break;
case 70: case 71:

        this.$ = {
            type: 'postfix',
            lhs: $$[$0-1],
            op: $$[$0]
        }
    
break;
case 77:

        this.$ = {
            type: 'index',
            lhs: $$[$0-3],
            rhs: $$[$0-1],
        }
    
break;
case 81: case 82:

        this.$ = {
            type: 'look',
            lhs: $$[$0-2],
            op: $$[$0-1],
            rhs: $$[$0],
        }
    
break;
case 91:

        this.$ = {
            type: 'reference',
            data: $$[$0]
        }
    
break;
case 95: case 96: case 97:

        this.$ = {
            type: 'paren',
            block: $$[$0-1]
        }
    
break;
case 98:

        this.$ = {
            type: 'brace',
            block: $$[$0-1]
        }
    
break;
case 99:

        this.$ = {
            type: 'brace',
            block: {
                type: 'block',
                sequence: [$$[$0-1]],
            }
        }
    
break;
case 100:

        this.$ = {
            type: 'range',
            from: parseInt($$[$0-2]),
            stop: parseInt($$[$0]),
        }
    
break;
case 101:

        this.$ = {
            type: 'void'
        }
    
break;
case 102:

        this.$ = {
            type: 'path',
            data: $$[$0],
        }
    
break;
case 103:

        this.$ = {
            type: 'dstring',
            data: $$[$0].substr(1, $$[$0].length - 2),
        }
    
break;
case 104:

        this.$ = {
            type: 'sstring',
            data: $$[$0].substr(1, $$[$0].length - 2),
        }
    
break;
case 105:

        this.$ = {
            type: 'int',
            data: parseInt($$[$0]),
        }
    
break;
case 106:

        this.$ = {
            type: 'float',
            data: parseFloat($$[$0])
        }
    
break;
case 107:

        this.$ = {
            type: 'literal',
            data: true
        }
    
break;
case 108:

        this.$ = {
            type: 'literal',
            data: false
        }
    
break;
case 109:

        this.$ = {
            type: 'symbol',
            data: $$[$0],
        }
    
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{1:[3]},{5:[1,55],10:$Vg},{5:[1,57],10:$Vh},o($Vi,[2,9]),o($Vi,[2,10]),o($Vj,$Vk,{30:12,31:13,32:17,34:18,35:19,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,14:59,15:60,16:$Vl,17:$Vm,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),o($Vi,[2,16],{20:[1,63]}),o($Vi,[2,17],{20:[1,64]}),o($Vj,[2,32],{30:12,31:13,32:17,34:18,35:19,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,15:65,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),o($Vn,[2,20]),o($Vn,[2,21]),o($Vo,[2,35],{33:[1,66]}),o($Vo,[2,36]),{13:68,15:9,22:67,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vn,[2,23]),o($Vn,[2,24],{26:$Vp}),o([5,9,10,16,17,20,26,37,38,39,40,43,44,47,52,55,58,62,63,64,67,74,75,77,81,82,83,84,85,87,88,89,90,91,92,93],$Vq,{33:[1,70]}),o($Vr,[2,39],{36:71,37:$Vs,38:$Vt,39:$Vu,40:$Vv}),o($Vr,[2,40],{36:76,37:$Vs,38:$Vt,39:$Vu,40:$Vv}),o($Vj,[2,27]),o($Vj,[2,28]),o($Vw,[2,91]),o($Vx,[2,47]),o($Vx,[2,48]),{13:68,15:9,27:78,28:77,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vw,$Vy),o($Vw,[2,93]),o($Vw,[2,94]),{4:81,6:82,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,44:[1,79],45:80,46:83,47:[1,84],50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vx,[2,56],{52:[1,85]}),o($Vx,[2,57],{52:[1,86]}),o($Vz,[2,60],{55:[1,87]}),o($Vz,[2,61],{55:[1,88]}),o($VA,[2,64],{58:[1,89]}),o($VA,[2,65],{58:[1,90]}),o($VB,[2,68],{61:91,62:$VC,63:$VD,64:$VE}),o($VB,[2,69],{61:95,62:$VC,63:$VD,64:$VE}),o($VF,[2,75]),o($VF,[2,76],{67:[1,96]}),o($VG,[2,79],{72:97,74:$VH,75:$VI}),o($VG,[2,80],{72:100,74:$VH,75:$VI}),o($Vw,[2,86]),o($Vw,[2,87]),o($Vw,[2,89]),o($Vw,[2,90]),o($Vw,[2,102]),o($Vw,[2,103]),o($Vw,[2,104]),o($Vw,[2,105],{86:[1,101]}),o($Vw,[2,106]),o($Vw,[2,107]),o($Vw,[2,108]),o($Vw,[2,109]),{4:103,6:106,7:102,8:104,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,84:[1,105],85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{1:[2,1]},{6:107,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{1:[2,2]},{6:108,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{11:111,13:109,15:110,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vo,[2,34]),o($VJ,[2,14]),o($VJ,[2,15]),{13:68,15:9,19:112,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{13:68,15:9,19:113,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vo,[2,33]),{31:114,32:115,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vn,[2,22]),o($Vj,$Vk,{30:12,31:13,32:17,34:18,35:19,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,15:60,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),{13:68,15:9,24:117,25:116,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{31:118,32:115,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,35:119,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),{32:115,35:120,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vj,[2,29]),o($Vj,[2,30]),o($Vx,[2,49]),{9:[1,122],44:[1,121]},{10:$Vg,44:[1,123]},{10:$Vh,44:[1,124]},o($VK,[2,51]),o([10,20,26,33,37,38,39,40,43,44,47,52,55,58,62,63,64,67,74,75,77,81,82,83,85,87,88,89,90,91,92,93],$Vy,{48:$VL}),{32:115,43:$VM,47:$V3,51:126,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,43:$VM,47:$V3,51:128,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,43:$VM,47:$V3,54:129,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,43:$VM,47:$V3,54:130,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,43:$VM,47:$V3,57:131,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:115,43:$VM,47:$V3,57:132,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74]),o($VF,[2,70]),{32:115,35:134,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,68:133,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{32:136,47:$V3,73:135,80:22,81:$V5,82:$V6},o($VN,[2,83]),o($VN,[2,84]),{32:136,47:$V3,73:137,80:22,81:$V5,82:$V6},{85:[1,138]},{9:[1,140],84:[1,139]},{10:$Vg,84:[1,141]},{9:[1,143],84:[1,142]},o($Vw,[2,101]),o($VO,$VP,{10:$Vh}),o($VQ,[2,8]),o($VQ,[2,7]),o($Vi,[2,11],{30:12,31:13,32:17,34:18,35:19,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,14:59,15:60,16:$Vl,17:$Vm,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),o($Vi,[2,12],{30:12,31:13,32:17,34:18,35:19,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,15:65,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),o($Vi,[2,13]),o($Vn,[2,19]),o($Vn,[2,18]),o($Vr,[2,38]),o($Vw,$Vq),o($Vn,[2,25],{26:$Vp}),o($Vn,[2,26]),o($Vr,[2,37]),o($VR,[2,42]),o($VR,[2,41]),o($Vx,[2,50]),{46:144,47:[1,145]},o($Vw,[2,98]),o($Vw,[2,99]),{32:115,41:148,42:147,43:$V2,47:$V3,49:146,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vz,[2,59]),{4:81,6:82,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vz,[2,58]),o($VA,[2,63]),o($VA,[2,62]),o($VB,[2,67]),o($VB,[2,66]),{69:[1,149]},{69:[2,78]},o($Vw,[2,81]),o($Vw,[2,85]),o($Vw,[2,82]),o($Vw,[2,100]),o($Vw,[2,95]),{6:151,8:150,11:4,12:5,13:6,15:9,18:7,19:8,21:10,22:11,23:$V0,24:15,25:16,27:20,28:21,29:$V1,30:12,31:13,32:17,34:18,35:19,41:23,42:24,43:$V2,47:$V3,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,77:$V4,78:44,79:45,80:22,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vw,[2,96]),o($Vw,[2,97]),o($VO,[2,3],{11:4,12:5,13:6,18:7,19:8,15:9,21:10,22:11,30:12,31:13,24:15,25:16,32:17,34:18,35:19,27:20,28:21,80:22,41:23,42:24,50:30,51:31,53:32,54:33,56:34,57:35,59:36,60:37,65:38,66:39,70:40,71:41,76:42,78:44,79:45,6:151,8:152,23:$V0,29:$V1,43:$V2,47:$V3,77:$V4,81:$V5,82:$V6,83:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf}),o($VK,[2,52]),{48:$VL},o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VF,[2,77]),o($VO,[2,5]),o($VO,$VP),o($VO,[2,4])],
defaultActions: {55:[2,1],57:[2,2],134:[2,78]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */;
break;
case 1:return 88;
break;
case 2:return 89;
break;
case 3:return 87;
break;
case 4:/* ingore */;
break;
case 5:return 90;
break;
case 6:return 85;
break;
case 7:return 86;
break;
case 8:return 62;
break;
case 9:return 64;
break;
case 10:return 63;
break;
case 11:return 91;
break;
case 12:return 92;
break;
case 13:return 92;
break;
case 14:return 92;
break;
case 15:return 17;
break;
case 16:return 81;
break;
case 17:return 82;
break;
case 18:return 23;
break;
case 19:return 75;
break;
case 20:return 33;
break;
case 21:return 26;
break;
case 22:return 37;
break;
case 23:return 38;
break;
case 24:return 52;
break;
case 25:return 16;
break;
case 26:return 55;
break;
case 27:return 58;
break;
case 28:return 83;
break;
case 29:return 84;
break;
case 30:return 67;
break;
case 31:return 69;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 48;
break;
case 35:return 10;
break;
case 36:return 29;
break;
case 37:return 9;
break;
case 38:return 'SLASH';
break;
case 39:return 39;
break;
case 40:return 40;
break;
case 41:return 20;
break;
case 42:return 74;
break;
case 43:return 93;
break;
case 44:return 47;
break;
case 45:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:["].*?["])/,/^(?:['].*?['])/,/^(?:[\/][\/A-Z0-9a-z_-]*)/,/^(?:[#].*)/,/^(?:[0-9][.][0-9]+)/,/^(?:[0-9]+)/,/^(?:[.][.])/,/^(?:[+][+])/,/^(?:[-][-])/,/^(?:[!][!])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:No\b)/,/^(?:Yes\b)/,/^(?:else\b)/,/^(?:if\b)/,/^(?:for\b)/,/^(?:[&])/,/^(?:[-][>])/,/^(?:[<][-])/,/^(?:[=][>])/,/^(?:[=][=])/,/^(?:[!][=])/,/^(?:[%])/,/^(?:[$])/,/^(?:[+])/,/^(?:[-])/,/^(?:[(])/,/^(?:[)])/,/^(?:\[)/,/^(?:\])/,/^(?:[{])/,/^(?:[}])/,/^(?:[:])/,/^(?:[;])/,/^(?:[!])/,/^(?:[,])/,/^(?:[\/])/,/^(?:[<])/,/^(?:[>])/,/^(?:[=])/,/^(?:[.])/,/^(?:[A-Z]+)/,/^(?:\w+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = virshLang;
exports.Parser = virshLang.Parser;
exports.parse = function () { return virshLang.parse.apply(virshLang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}