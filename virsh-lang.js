/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var virshLang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,27],$V2=[1,24],$V3=[1,41],$V4=[1,25],$V5=[1,26],$V6=[1,52],$V7=[1,47],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,54],$Vg=[1,55],$Vh=[5,10,11,42,82],$Vi=[5,10,11,21,24,42,82],$Vj=[2,29],$Vk=[1,58],$Vl=[1,59],$Vm=[5,10,11,21,42,82],$Vn=[5,10,11,17,18,21,24,41,42,45,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vo=[2,86],$Vp=[5,10,11,17,18,21,24,31,41,42,45,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,53,56,60,61,62,65,67,72,73,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vv=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vw=[2,90],$Vx=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vy=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,53,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vz=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,53,56,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,53,56,60,61,62,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$VE=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,50,53,56,60,61,62,65,67,75,79,80,81,82,83,85,86,87,88,89,90,91],$VF=[1,95],$VG=[1,96],$VH=[41,45,75,79,80,81,83,85,86,87,88,89,90,91],$VI=[10,42],$VJ=[1,121],$VK=[1,123],$VL=[45,79,80],$VM=[10,82],$VN=[2,7],$VO=[5,11,42,82],$VP=[5,10,11,17,18,21,24,31,35,36,37,38,41,42,45,75,79,80,81,82,83,85,86,87,88,89,90,91];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"done":3,"all":4,"EOF":5,"block":6,"blockNext":7,"list":8,"listNext":9,"COMMA":10,"SEMICOLON":11,"bigCall":12,"bigCallNext":13,"call":14,"bigCallAliases":15,"callNext":16,"DOLLAR":17,"ELSE":18,"assign":19,"assignNext":20,"ASSIGN":21,"unapply":22,"unapplyNext":23,"UNAPPLY":24,"invert":25,"invertNext":26,"BANG":27,"take":28,"takeNext":29,"reference":30,"TAKE":31,"compare":32,"compareNext":33,"cmp":34,"EEQ":35,"NEQ":36,"LT":37,"GT":38,"obj":39,"objNext":40,"OBRACE":41,"CBRACE":42,"objList":43,"keyval":44,"WORD":45,"COLON":46,"keyvalNext":47,"mod":48,"modNext":49,"MOD":50,"add":51,"addNext":52,"PLUS":53,"subtract":54,"subtractNext":55,"SUBTRACT":56,"postfixUnitary":57,"postfixUnitaryNext":58,"uniTypes":59,"INCREMENT":60,"INVERT":61,"DECREMENT":62,"index":63,"indexNext":64,"OBRACK":65,"indexInside":66,"CBRACK":67,"lookup":68,"lookupNext":69,"lookOp":70,"lookupRHS":71,"DOT":72,"LOOK":73,"simple":74,"simpleNext":75,"literal":76,"deferred":77,"refWord":78,"IF":79,"FOR":80,"OPAREN":81,"CPAREN":82,"INTEGER":83,"RANGE":84,"PATH":85,"DSTRING":86,"SSTRING":87,"FLOAT":88,"TRUE":89,"FALSE":90,"SYMBOL":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"COMMA",11:"SEMICOLON",17:"DOLLAR",18:"ELSE",21:"ASSIGN",24:"UNAPPLY",27:"BANG",31:"TAKE",35:"EEQ",36:"NEQ",37:"LT",38:"GT",41:"OBRACE",42:"CBRACE",45:"WORD",46:"COLON",50:"MOD",53:"PLUS",56:"SUBTRACT",60:"INCREMENT",61:"INVERT",62:"DECREMENT",65:"OBRACK",67:"CBRACK",72:"DOT",73:"LOOK",75:"simpleNext",79:"IF",80:"FOR",81:"OPAREN",82:"CPAREN",83:"INTEGER",84:"RANGE",85:"PATH",86:"DSTRING",87:"SSTRING",88:"FLOAT",89:"TRUE",90:"FALSE",91:"SYMBOL"},
productions_: [0,[3,2],[4,1],[4,1],[8,2],[8,3],[8,3],[9,1],[6,3],[6,3],[7,1],[7,1],[12,3],[12,3],[12,3],[15,1],[15,1],[13,1],[13,1],[19,3],[19,3],[20,1],[20,1],[22,3],[22,3],[23,1],[23,1],[25,2],[25,2],[26,1],[26,1],[14,2],[14,2],[16,1],[16,1],[28,3],[28,3],[29,1],[29,1],[32,3],[32,3],[34,1],[34,1],[34,1],[34,1],[33,1],[33,1],[39,2],[39,3],[43,1],[43,3],[44,3],[47,1],[47,1],[40,1],[40,1],[48,3],[48,3],[49,1],[49,1],[51,3],[51,3],[52,1],[52,1],[54,3],[54,3],[55,1],[55,1],[57,2],[57,2],[59,1],[59,1],[59,1],[58,1],[58,1],[63,4],[66,1],[64,1],[64,1],[68,3],[68,3],[70,1],[70,1],[71,1],[69,1],[69,1],[74,1],[74,1],[74,1],[30,1],[78,1],[78,1],[78,1],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1]
    
break;
case 4:

        this.$ = {
            type: 'list',
            sequence: [$$[$0-1]]
        }
    
break;
case 5:

        this.$ = {
            type: 'list',
            sequence: [$$[$0-2], $$[$0]]
        }
    
break;
case 6: case 9:

        $$[$0-2].sequence.push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 8:

        this.$ = {
            type: 'block',
            sequence: [$$[$0-2], $$[$0]]
        }
    
break;
case 12: case 13: case 14:

        $$[$0-2].args.push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 19: case 20:

        this.$ = {
            type: 'assign',
            lhs: $$[$0-2],
            rhs: $$[$0],
            op: $$[$0-1],
        }
    
break;
case 23: case 24:

        this.$ = {
            type: 'unapply',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 27: case 28:

        this.$ = {
            type: 'bang',
            rhs: $$[$0],
        }
    
break;
case 31:

        this.$ = {
            type: 'call',
            lhs: $$[$0-1],
            args: [$$[$0]],
        }
    
break;
case 32:

        $$[$0-1].args.push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 35: case 36:

        this.$ = {
            type: 'take',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 39: case 40:

        this.$ = {
            type: 'comp',
            lhs: $$[$0-2],
            rhs: $$[$0],
            op: $$[$0-1],
        }
    
break;
case 47:

        this.$ = {
            type: 'object',
            list: []
        }
    
break;
case 48:

        this.$ = {
            type: 'object',
            list: $$[$0-1]
        }
    
break;
case 49:

        this.$ = [$$[$0]]
    
break;
case 50:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 51:

        this.$ = {
            type: 'keyval',
            key: $$[$0-2],
            val: $$[$0]
        }
    
break;
case 56: case 57:

        this.$ = {
            type: 'mod',
            lhs: $$[$0-2],
            rhs: $$[$0],
        }
    
break;
case 60: case 61:

        this.$ = {
            type: 'add',
            lhs: $$[$0-2],
            rhs: $$[$0]
        }
    
break;
case 64: case 65:

        this.$ = {
            type: 'subtract',
            lhs: $$[$0-2],
            rhs: $$[$0]
        }
    
break;
case 68: case 69:

        this.$ = {
            type: 'postfix',
            lhs: $$[$0-1],
            op: $$[$0]
        }
    
break;
case 75:

        this.$ = {
            type: 'index',
            lhs: $$[$0-3],
            rhs: $$[$0-1],
        }
    
break;
case 79: case 80:

        this.$ = {
            type: 'look',
            lhs: $$[$0-2],
            op: $$[$0-1],
            rhs: $$[$0],
        }
    
break;
case 89:

        this.$ = {
            type: 'reference',
            data: $$[$0]
        }
    
break;
case 93: case 94: case 95:

        this.$ = {
            type: 'paren',
            block: $$[$0-1]
        }
    
break;
case 96:

        this.$ = {
            type: 'brace',
            block: $$[$0-1]
        }
    
break;
case 97:

        this.$ = {
            type: 'brace',
            block: {
                type: 'block',
                sequence: [$$[$0-1]],
            }
        }
    
break;
case 98:

        this.$ = {
            type: 'range',
            from: parseInt($$[$0-2]),
            stop: parseInt($$[$0]),
        }
    
break;
case 99:

        this.$ = {
            type: 'path',
            data: $$[$0],
        }
    
break;
case 100:

        this.$ = {
            type: 'dstring',
            data: $$[$0].substr(1, $$[$0].length - 2),
        }
    
break;
case 101:

        this.$ = {
            type: 'sstring',
            data: $$[$0].substr(1, $$[$0].length - 2),
        }
    
break;
case 102:

        this.$ = {
            type: 'int',
            data: parseInt($$[$0]),
        }
    
break;
case 103:

        this.$ = {
            type: 'float',
            data: parseFloat($$[$0])
        }
    
break;
case 104:

        this.$ = {
            type: 'literal',
            data: true
        }
    
break;
case 105:

        this.$ = {
            type: 'literal',
            data: false
        }
    
break;
case 106:

        this.$ = {
            type: 'symbol',
            data: $$[$0],
        }
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{1:[3]},{5:[1,53]},{5:[2,2],11:$Vf},{5:[2,3],11:$Vg},o($Vh,[2,10]),o($Vh,[2,11]),o($Vi,$Vj,{28:13,29:14,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,15:56,16:57,17:$Vk,18:$Vl,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($Vh,[2,17],{21:[1,60]}),o($Vh,[2,18],{21:[1,61]}),o($Vi,[2,30],{28:13,29:14,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,16:62,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($Vm,[2,21],{24:[1,63]}),o($Vm,[2,22],{24:[1,64]}),o($Vn,[2,33],{31:[1,65]}),o($Vn,[2,34]),o($Vi,[2,25]),o($Vi,[2,26]),o([5,10,11,17,18,21,24,35,36,37,38,41,42,45,50,53,56,60,61,62,65,72,73,75,79,80,81,82,83,85,86,87,88,89,90,91],$Vo,{31:[1,66]}),o($Vp,[2,37],{34:67,35:$Vq,36:$Vr,37:$Vs,38:$Vt}),o($Vp,[2,38],{34:72,35:$Vq,36:$Vr,37:$Vs,38:$Vt}),{14:75,16:10,25:74,26:73,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vu,[2,89]),o($Vv,[2,45]),o($Vv,[2,46]),o($Vu,$Vw),o($Vu,[2,91]),o($Vu,[2,92]),{6:78,7:79,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,42:[1,76],43:77,44:80,45:[1,81],48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vv,[2,54],{50:[1,82]}),o($Vv,[2,55],{50:[1,83]}),o($Vx,[2,58],{53:[1,84]}),o($Vx,[2,59],{53:[1,85]}),o($Vy,[2,62],{56:[1,86]}),o($Vy,[2,63],{56:[1,87]}),o($Vz,[2,66],{59:88,60:$VA,61:$VB,62:$VC}),o($Vz,[2,67],{59:92,60:$VA,61:$VB,62:$VC}),o($VD,[2,73]),o($VD,[2,74],{65:[1,93]}),o($VE,[2,77],{70:94,72:$VF,73:$VG}),o($VE,[2,78],{70:97,72:$VF,73:$VG}),o($Vu,[2,84]),o($Vu,[2,85]),o($Vu,[2,87]),o($Vu,[2,88]),o($Vu,[2,99]),o($Vu,[2,100]),o($Vu,[2,101]),o($Vu,[2,102],{84:[1,98]}),o($Vu,[2,103]),o($Vu,[2,104]),o($Vu,[2,105]),o($Vu,[2,106]),{6:100,7:102,8:99,9:101,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{1:[2,1]},{7:103,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{7:104,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{12:107,14:105,16:106,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vn,[2,32]),o($VH,[2,15]),o($VH,[2,16]),{14:75,16:10,20:108,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{14:75,16:10,20:109,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vn,[2,31]),{14:75,16:10,23:110,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{14:75,16:10,23:111,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{29:112,30:113,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{29:114,30:113,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,33:115,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),{30:113,33:116,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,$Vj,{28:13,29:14,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,16:57,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($Vv,[2,47]),{10:[1,118],42:[1,117]},{11:$Vf,42:[1,119]},{11:$Vg,42:[1,120]},o($VI,[2,49]),o([11,21,24,31,35,36,37,38,41,42,45,50,53,56,60,61,62,65,72,73,75,79,80,81,83,85,86,87,88,89,90,91],$Vw,{46:$VJ}),{30:113,41:$VK,45:$V2,49:122,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,41:$VK,45:$V2,49:124,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,41:$VK,45:$V2,52:125,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,41:$VK,45:$V2,52:126,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,41:$VK,45:$V2,55:127,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:113,41:$VK,45:$V2,55:128,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($VD,[2,69]),o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,68]),{30:113,33:130,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,66:129,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},{30:132,45:$V2,71:131,78:21,79:$V4,80:$V5},o($VL,[2,81]),o($VL,[2,82]),{30:132,45:$V2,71:133,78:21,79:$V4,80:$V5},{83:[1,134]},{10:[1,136],82:[1,135]},{11:$Vf,82:[1,137]},{10:[1,139],82:[1,138]},o($VM,$VN,{11:$Vg}),o($VO,[2,9]),o($VO,[2,8]),o($Vh,[2,12],{28:13,29:14,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,15:56,16:57,17:$Vk,18:$Vl,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($Vh,[2,13],{28:13,29:14,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,16:62,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($Vh,[2,14]),o($Vm,[2,20]),o($Vm,[2,19]),o($Vi,[2,24]),o($Vi,[2,23]),o($Vp,[2,36]),o($Vu,$Vo),o($Vp,[2,35]),o($VP,[2,40]),o($VP,[2,39]),o($Vv,[2,48]),{44:140,45:[1,141]},o($Vu,[2,96]),o($Vu,[2,97]),{30:113,39:144,40:143,41:$V1,45:$V2,47:142,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vx,[2,57]),{6:78,7:79,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vx,[2,56]),o($Vy,[2,61]),o($Vy,[2,60]),o($Vz,[2,65]),o($Vz,[2,64]),{67:[1,145]},{67:[2,76]},o($Vu,[2,79]),o($Vu,[2,83]),o($Vu,[2,80]),o($Vu,[2,98]),o($Vu,[2,93]),{7:147,9:146,12:5,13:6,14:7,16:10,19:8,20:9,22:11,23:12,25:15,26:16,27:$V0,28:13,29:14,30:17,32:18,33:19,39:22,40:23,41:$V1,45:$V2,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,75:$V3,76:42,77:43,78:21,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve},o($Vu,[2,94]),o($Vu,[2,95]),o($VM,[2,4],{12:5,13:6,14:7,19:8,20:9,16:10,22:11,23:12,28:13,29:14,25:15,26:16,30:17,32:18,33:19,78:21,39:22,40:23,48:28,49:29,51:30,52:31,54:32,55:33,57:34,58:35,63:36,64:37,68:38,69:39,74:40,76:42,77:43,7:147,9:148,27:$V0,41:$V1,45:$V2,75:$V3,79:$V4,80:$V5,81:$V6,83:$V7,85:$V8,86:$V9,87:$Va,88:$Vb,89:$Vc,90:$Vd,91:$Ve}),o($VI,[2,50]),{46:$VJ},o($VI,[2,51]),o($VI,[2,52]),o($VI,[2,53]),o($VD,[2,75]),o($VM,[2,6]),o($VM,$VN),o($VM,[2,5])],
defaultActions: {53:[2,1],130:[2,76]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */;
break;
case 1:return 86;
break;
case 2:return 87;
break;
case 3:return 85;
break;
case 4:/* ingore */;
break;
case 5:return 88;
break;
case 6:return 83;
break;
case 7:return 84;
break;
case 8:return 60;
break;
case 9:return 62;
break;
case 10:return 61;
break;
case 11:return 89;
break;
case 12:return 90;
break;
case 13:return 90;
break;
case 14:return 90;
break;
case 15:return 18;
break;
case 16:return 79;
break;
case 17:return 80;
break;
case 18:return 73;
break;
case 19:return 31;
break;
case 20:return 24;
break;
case 21:return 35;
break;
case 22:return 36;
break;
case 23:return 50;
break;
case 24:return 17;
break;
case 25:return 53;
break;
case 26:return 56;
break;
case 27:return 81;
break;
case 28:return 82;
break;
case 29:return 65;
break;
case 30:return 67;
break;
case 31:return 41;
break;
case 32:return 42;
break;
case 33:return 46;
break;
case 34:return 11;
break;
case 35:return 27;
break;
case 36:return 10;
break;
case 37:return 'SLASH';
break;
case 38:return 37;
break;
case 39:return 38;
break;
case 40:return 21;
break;
case 41:return 72;
break;
case 42:return 91;
break;
case 43:return 45;
break;
case 44:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:["].*?["])/,/^(?:['].*?['])/,/^(?:[\/][\/A-Z0-9a-z_-]*)/,/^(?:[#].*)/,/^(?:[0-9][.][0-9]+)/,/^(?:[0-9]+)/,/^(?:[.][.])/,/^(?:[+][+])/,/^(?:[-][-])/,/^(?:[!][!])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:No\b)/,/^(?:Yes\b)/,/^(?:else\b)/,/^(?:if\b)/,/^(?:for\b)/,/^(?:[-][>])/,/^(?:[<][-])/,/^(?:[=][>])/,/^(?:[=][=])/,/^(?:[!][=])/,/^(?:[%])/,/^(?:[$])/,/^(?:[+])/,/^(?:[-])/,/^(?:[(])/,/^(?:[)])/,/^(?:\[)/,/^(?:\])/,/^(?:[{])/,/^(?:[}])/,/^(?:[:])/,/^(?:[;])/,/^(?:[!])/,/^(?:[,])/,/^(?:[\/])/,/^(?:[<])/,/^(?:[>])/,/^(?:[=])/,/^(?:[.])/,/^(?:[A-Z]+)/,/^(?:\w+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = virshLang;
exports.Parser = virshLang.Parser;
exports.parse = function () { return virshLang.parse.apply(virshLang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}